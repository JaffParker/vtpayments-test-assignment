{"version":3,"sources":["helpers/validator/pipe.ts","helpers/validator/rules/email.ts","helpers/validator/rules/required.ts","helpers/validator/rules/sameAs.ts","helpers/validator/index.ts","contexts/DisabledFormContext.ts","components/Forms/Inputs/TextInput.tsx","components/Layout/Views/MiniHeader.tsx","components/Forms/Inputs/TextInput.module.css","components/Forms/Inputs/SubmitButton.tsx","components/Forms/Inputs/PasswordInput.tsx","graphql/mutations/ConfirmEmail.ts","graphql/mutations/SetUserPassword.ts","components/Auth/Forms/PasswordForm.tsx","components/Misc/RunMutation.tsx","components/Auth/Containers/ConfirmEmailContainer.tsx","components/Routers/Routes/ConfirmEmailRoute.tsx"],"names":["pipe","_len","arguments","length","rules","Array","_key","value","values","errors","filter","rule","reduce","concat","Object","toConsumableArray","undefined","error","email","message","test","isEmpty","required","isBoolean","sameAs","fieldName","hasOwnProperty","__webpack_require__","d","__webpack_exports__","pipe_pipe","email_email","required_required","sameAs_sameAs","DisabledFormContext","createContext","Provider","TextInput","_ref","name","props","objectWithoutProperties","_useField","useField","objectSpread","validateOnBlur","validate","validateOnChange","validateOnMount","fieldApi","fieldState","_useField$fieldState","touched","formDisabled","useContext","inputProps","omitBy","includes","react_default","a","createElement","react","esm","assign","disabled","className","classNames","defineProperty","is-invalid","styles","Disabled","FormFeedback","tooltip","MiniHeader","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_logo_png__WEBPACK_IMPORTED_MODULE_1__","_logo_png__WEBPACK_IMPORTED_MODULE_1___default","src","logo","alt","module","exports","SubmitButton","_ref$disabled","_ref$submitting","submitting","children","_home_jaffparker_Code_Work_VTPayments_code_test_assignment_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_useFormState","useFormState","pristine","invalid","react__WEBPACK_IMPORTED_MODULE_1___default","reactstrap__WEBPACK_IMPORTED_MODULE_3__","type","color","PasswordInput","_TextInput__WEBPACK_IMPORTED_MODULE_1__","ConfirmEmail","gql","_templateObject","SetUserPassword","SetUserPassword_templateObject","PasswordForm","onSubmit","_ref$submitText","submitText","Row","Col","sm","md","FormGroup","Label","notify","RunMutation","mutateFn","onSuccess","onComplete","shouldRun","_useState","useState","_useState2","slicedToArray","running","setRunning","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","_result","wrap","_context","prev","next","result","sent","finish","stop","apply","this","run","ConfirmEmailContainer","withRouter","token","push","history","emailConfirmed","setEmailConfirmed","_useState3","_useState4","userId","setUserId","react_apollo_esm","mutation","setPassword","settingPassword","loading","variables","confirmEmail","_ref3","confirmingEmail","handlePasswordSet","_ref5","_ref4","password","input","id","_x","RunMutation_RunMutation","data","Container","size","offset","Alert","Loading","PasswordForm_PasswordForm","ConfirmEmailRoute","match","params","DocumentTitle","title"],"mappings":"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","file":"static/js/4.15657f22.chunk.js","sourcesContent":["//eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const pipe = (...rules: Array<Function | undefined>) => (\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  values: Record<string, any>,\n): string | undefined => {\n  const errors = rules\n    .filter(rule => rule)\n    .reduce(\n      //@ts-ignore\n      (errors, rule: Function) => [...errors, rule(value, values) || undefined],\n      [],\n    )\n    //@ts-ignore\n    .filter(error => error)\n\n  return errors.length ? errors[0] : undefined\n}\n","import isEmpty from 'lodash/isEmpty'\n\n//eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const email = (message = 'This does not look like an email') => (\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n) =>\n  /([\\w\\.\\-_]+)?\\w+@[\\w-_]+(\\.\\w+){1,}/i.test(value) || isEmpty(value)\n    ? undefined\n    : message\n","import isEmpty from 'lodash/isEmpty'\nimport isBoolean from 'lodash/isBoolean'\n\n//eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const required = (message = 'Value cannot be empty') => (\n  value: any, //eslint-disable-line @typescript-eslint/no-explicit-any\n) => (!isBoolean(value) && isEmpty(value) ? message : undefined)\n","import isEmpty from 'lodash/isEmpty'\n\n//eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const sameAs = (\n  fieldName: string,\n  message = `Value must be the same as ${fieldName}`,\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => (value: any, values: { [key: string]: any }) =>\n  isEmpty(value) ||\n  (values.hasOwnProperty(fieldName) && values[fieldName] === value)\n    ? undefined\n    : message\n","import { pipe } from './pipe'\nimport { email } from './rules/email'\nimport { required } from './rules/required'\nimport { date } from './rules/date'\nimport { after } from './rules/after'\nimport { phone } from './rules/phone'\nimport { regex } from './rules/regex'\nimport { oneOf } from './rules/oneOf'\nimport { sameAs } from './rules/sameAs'\n\nexport { pipe, email, required, date, after, phone, regex, oneOf, sameAs }\n","import { createContext } from 'react'\n\nexport const DisabledFormContext = createContext(false)\nexport const DisabledFormContextProvider = DisabledFormContext.Provider\n","import React, { FC, Fragment, useContext } from 'react'\nimport { BasicText, useField } from 'informed'\nimport classNames from 'classnames'\nimport { FormFeedback } from 'reactstrap'\nimport { BasicInputProps } from './BasicInputProps'\nimport omitBy from 'lodash/omitBy'\nimport { DisabledFormContext } from '../../../contexts/DisabledFormContext'\nimport styles from './TextInput.module.css'\n\nexport const TextInput: FC<BasicInputProps<string>> = ({ name, ...props }) => {\n  const {\n    fieldApi,\n    fieldState,\n    fieldState: { touched, error },\n  } = useField(name, {\n    ...props,\n    validateOnBlur: !!props.validate,\n    validateOnChange: !!props.validate,\n    validateOnMount: !!props.validate,\n  })\n  const formDisabled = useContext(DisabledFormContext)\n\n  const inputProps = omitBy(\n    props,\n    value => !['string', 'number'].includes(typeof value),\n  )\n\n  return (\n    <Fragment>\n      <BasicText\n        disabled={formDisabled}\n        fieldState={fieldState}\n        fieldApi={fieldApi}\n        {...inputProps}\n        className={classNames('form-control', {\n          'is-invalid': touched && error,\n          [styles.Disabled]: formDisabled,\n        })}\n      />\n      {error && touched && <FormFeedback tooltip>{error}</FormFeedback>}\n    </Fragment>\n  )\n}\n","import React, { FC } from 'react'\nimport logo from './logo.png'\n\nexport const MiniHeader: FC = () => (\n  <div className=\"text-center\">\n    <img src={logo} alt=\"VTPayments\" />\n  </div>\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Disabled\":\"TextInput_Disabled__udp3B\"};","import React, { FC } from 'react'\nimport { useFormState } from 'informed'\nimport { Button, ButtonProps } from 'reactstrap'\n\ninterface SubmitButtonProps extends ButtonProps {\n  submitting: boolean\n}\n\nexport const SubmitButton: FC<SubmitButtonProps> = ({\n  disabled = false,\n  submitting = false,\n  children,\n  ...props\n}) => {\n  const { pristine, invalid } = useFormState()\n\n  return (\n    <Button\n      type=\"submit\"\n      color=\"success\"\n      disabled={pristine || invalid || submitting || disabled}\n      className={submitting ? 'progress-bar-striped progress-bar-animated' : ''}\n      {...props}\n    >\n      {children}\n    </Button>\n  )\n}\n","import React from 'react'\nimport { TextInput } from './TextInput'\nimport { BasicInputProps } from './BasicInputProps'\n\nexport const PasswordInput: React.FC<BasicInputProps<string>> = props => (\n  <TextInput type=\"password\" {...props} />\n)\n","import gql from 'graphql-tag'\n\nexport const ConfirmEmail = gql`\n  mutation ConfirmEmail($token: String!) {\n    confirmEmail(token: $token) {\n      email\n      userId\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const SetUserPassword = gql`\n  mutation SetUserPassword($input: SetUserPasswordInput!) {\n    setUserPassword(input: $input)\n  }\n`\n","import React, { FC } from 'react'\nimport { Form } from 'informed'\nimport { SubmitButton } from '../../Forms/Inputs/SubmitButton'\nimport { Row, Col, FormGroup, Label } from 'reactstrap'\nimport { PasswordInput } from '../../Forms/Inputs/PasswordInput'\nimport { sameAs, pipe, required } from '../../../helpers/validator'\n\nexport interface PasswordFormValues {\n  password: string\n}\ninterface PasswordFormProps {\n  onSubmit: (values: PasswordFormValues) => void\n  submitting: boolean\n  submitText?: string\n}\n\nexport const PasswordForm: FC<PasswordFormProps> = ({\n  onSubmit,\n  submitting,\n  submitText = 'Create',\n}) => (\n  <Form onSubmit={onSubmit}>\n    <Row>\n      <Col sm=\"12\" md=\"6\">\n        <FormGroup>\n          <Label>Password:</Label>\n          <PasswordInput\n            name=\"password\"\n            notify={['passwordConfirmation']}\n            validate={required()}\n          />\n        </FormGroup>\n      </Col>\n      <Col sm=\"12\" md=\"6\">\n        <FormGroup>\n          <Label>Same password again:</Label>\n          <PasswordInput\n            name=\"passwordConfirmation\"\n            validate={pipe(\n              required(),\n              sameAs('password'),\n            )}\n          />\n        </FormGroup>\n      </Col>\n    </Row>\n\n    <hr />\n    <div className=\"float-right\">\n      <SubmitButton submitting={submitting}>{submitText}</SubmitButton>\n    </div>\n  </Form>\n)\n","import React, { FC, useEffect, Fragment, useState } from 'react'\nimport { MutationFn, FetchResult } from 'react-apollo'\n\ninterface RunMutationProps {\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  mutateFn: MutationFn<any, any>\n  shouldRun: boolean\n  onSuccess?: (result: FetchResult) => void\n  onComplete?: () => void\n}\n\nexport const RunMutation: FC<RunMutationProps> = ({\n  mutateFn,\n  onSuccess,\n  onComplete,\n  children,\n  shouldRun,\n}) => {\n  const [running, setRunning] = useState(false)\n\n  useEffect(() => {\n    const run = async (): Promise<void> => {\n      if (shouldRun && !running) {\n        setRunning(true)\n        try {\n          const result = await mutateFn()\n          onSuccess && result && onSuccess(result)\n        } finally {\n          onComplete && onComplete()\n          setRunning(false)\n        }\n      }\n    }\n\n    run()\n  }, [shouldRun, mutateFn, onSuccess, onComplete, running])\n\n  return <Fragment>{children}</Fragment>\n}\n","import React, { useState } from 'react'\nimport { ConfirmEmail } from '../../../graphql/mutations/ConfirmEmail'\nimport { Mutation } from 'react-apollo'\nimport { EmailConfirmation, SetUserPasswordInput } from '../../../types/Api'\nimport { Loading } from '../../Misc/Loading'\nimport { SetUserPassword } from '../../../graphql/mutations/SetUserPassword'\nimport { PasswordForm, PasswordFormValues } from '../Forms/PasswordForm'\nimport { MiniHeader } from '../../Layout/Views/MiniHeader'\nimport { Alert, Container, Col } from 'reactstrap'\nimport { RunMutation } from '../../Misc/RunMutation'\nimport { withRouter, RouteComponentProps } from 'react-router'\n\ninterface ConfirmEmailContainerProps {\n  token: string\n}\n\nexport const ConfirmEmailContainer = withRouter<\n  ConfirmEmailContainerProps & RouteComponentProps\n>(({ token, history: { push } }) => {\n  const [emailConfirmed, setEmailConfirmed] = useState(false)\n  const [userId, setUserId] = useState('')\n\n  return (\n    <Mutation<{ setUserPassword: void }, { input: SetUserPasswordInput }>\n      mutation={SetUserPassword}\n    >\n      {(setPassword, { loading: settingPassword }) => (\n        <Mutation<{ confirmEmail: EmailConfirmation }, { token: string }>\n          mutation={ConfirmEmail}\n          variables={{ token }}\n        >\n          {(confirmEmail, { loading: confirmingEmail, error }) => {\n            const handlePasswordSet = async ({\n              password,\n            }: PasswordFormValues): Promise<void> => {\n              await setPassword({\n                variables: { input: { id: userId, password } },\n              })\n              push('/')\n            }\n\n            return (\n              <RunMutation\n                mutateFn={confirmEmail}\n                shouldRun={!emailConfirmed}\n                onSuccess={result => {\n                  setUserId(result.data!.confirmEmail.userId)\n                }}\n                onComplete={() => {\n                  setEmailConfirmed(true)\n                }}\n              >\n                <Container className=\"mt-5\">\n                  <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\n                    <MiniHeader />\n                    <h1 className=\"mt-5\">Finish Sign Up</h1>\n                    <hr />\n                    {error && (\n                      <Alert color=\"danger\">Cannot confirm your email</Alert>\n                    )}\n                    {confirmingEmail && <Loading />}\n                    {emailConfirmed && userId && (\n                      <PasswordForm\n                        onSubmit={handlePasswordSet}\n                        submitting={settingPassword}\n                        submitText=\"Create\"\n                      />\n                    )}\n                  </Col>\n                </Container>\n              </RunMutation>\n            )\n          }}\n        </Mutation>\n      )}\n    </Mutation>\n  )\n})\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { DocumentTitle } from '../../Misc/DocumentTitle'\nimport { ConfirmEmailContainer } from '../../Auth/Containers/ConfirmEmailContainer'\n\nexport default function ConfirmEmailRoute({\n  match: {\n    params: { token },\n  },\n}: RouteComponentProps<{ token: string }>): JSX.Element {\n  return (\n    <DocumentTitle title=\"Confirm Your Email\">\n      <ConfirmEmailContainer token={token} />\n    </DocumentTitle>\n  )\n}\n"],"sourceRoot":""}